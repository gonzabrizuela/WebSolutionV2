@inject HttpClient Http

@*<DxComboBox NullText="Seleccione Deposito..." ReadOnly="@EsSoloLectura" 
            Data="@Depositos" 
            @bind-Value="@DepositoSeleccionado"
            TextFieldName="@nameof(Deposito.DES_DEP)"
            SelectedItemChanged="@((deposito)=> SelectedDepositoChanged(deposito))">
</DxComboBox>*@
<SfDropDownList TValue="int" TItem="Deposito" Placeholder="Seleccione Deposito..." Readonly="@EsSoloLectura">
    <SfDataManager Url="api/Depositos" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain=false></SfDataManager>
    <DropDownListEvents TItem="Deposito" TValue="int" ValueChange="SelectedDepositoChangedSync"></DropDownListEvents>
    <DropDownListFieldSettings Text="DES_DEP" Value="CG_DEP"></DropDownListFieldSettings>
</SfDropDownList>


@code {
    private IEnumerable<Deposito> Depositos = new List<Deposito>();

    [Parameter] public Deposito DepositoSeleccionado { get; set; } = new Deposito();
    [Parameter] public EventCallback<Deposito> OnSelectedDepositoChanged { get; set; }
    [Parameter] public bool EsSoloLectura { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Depositos = await Http.GetFromJsonAsync<IEnumerable<Deposito>>("api/Depositos");
        //var nuevoItem = (new Deposito[] { new Deposito() { 
        //    CG_DEP = 0,
        //    DES_DEP = "SELECCIONAR DEPOSITO"
        //} });

        //Depositos = nuevoItem.Concat(Depositos).ToArray();
        DepositoSeleccionado = Depositos.FirstOrDefault(d=> d.CG_DEP == 0);

        await InvokeAsync(StateHasChanged);
    }

    private void SelectedDepositoChanged(Deposito depos)
    {
        DepositoSeleccionado = depos;
        OnSelectedDepositoChanged.InvokeAsync(DepositoSeleccionado);
        InvokeAsync(StateHasChanged);
    }

    private void SelectedDepositoChangedSync(ChangeEventArgs<int, Deposito> dep)
    {
        if (dep.Value == (int)default)
        {
            return;
        }

        DepositoSeleccionado = dep.ItemData;
        OnSelectedDepositoChanged.InvokeAsync(DepositoSeleccionado);
        InvokeAsync(StateHasChanged);
    }

}
