@page "/operacionesstock"
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject ToastService toastService
@using System.Text.Json

<br />  
<div class="form-inline">
    <h4 class="mt-5 text-left">
        Operaciones de Stock a Realizar
        <small class="text-info"> <strong>Sincfusion</strong></small>
    </h4>


</div>
<hr />
<EditForm Model="@stockCabacera" OnSubmit="@Submit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col-md-8">
            <label class="col-form-label">Operaciones de Stock :</label>
            <SfDropDownList TValue="int?" TItem="Tire" @bind-Value="@stockCabacera.TIPOO"
                            Placeholder="Seleccione un tipo de operacion..."
                            DataSource="@Tipos">
                <DropDownListFieldSettings Text="Descrip" Value="Tipoo"></DropDownListFieldSettings>
            </SfDropDownList>
            <ValidationMessage For="@(() => stockCabacera.TIPOO)"></ValidationMessage>
        </div>
        <div class="form-group col-md-2">
            <label class="col-form-label">Pedido :</label>
            <SfNumericTextBox TValue="int?" @bind-Value="@stockCabacera.PEDIDO"></SfNumericTextBox>
            <ValidationMessage For="@(() => stockCabacera.PEDIDO)"></ValidationMessage>
        </div>
        <div class="form-group col-md-2">
            <label class="col-form-label">O. Compra :</label>
            <SfNumericTextBox TValue="int?" @bind-Value="@stockCabacera.OCOMPRA"></SfNumericTextBox>
            <ValidationMessage For="@(() => stockCabacera.OCOMPRA)"></ValidationMessage>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label class="col-form-label">Deposito de Salida: :</label>
            <ComboDeposito EsSoloLectura="true"></ComboDeposito>
            <ValidationMessage For="@(() => stockCabacera.TIPOO)"></ValidationMessage>
        </div>
        <div class="form-group col-md-6">
            <label class="col-form-label">Deposito de Ingreso: :</label>
            <ComboDeposito EsSoloLectura="true"></ComboDeposito>
            <ValidationMessage For="@(() => stockCabacera.TIPOO)"></ValidationMessage>
        </div>
    </div>



    <div class="form-group">
        <button type="submit" class="btn btn-primary">Probar</button>
    </div>
</EditForm>

@*<SfButton @onclick="@OpenDialog">Open Modal Dialog</SfButton>

<SfDialog Width="250px" IsModal="true" @bind-Visible="@IsVisible">
    <DialogEvents OnOverlayClick="@OnOverlayclick">
    </DialogEvents>
    <DialogTemplates>
        <Content> This is a modal dialog </Content>
    </DialogTemplates>
</SfDialog>*@

@code {

    Stock stockCabacera;

    List<Tire> Tipos = new List<Tire>() {
        new Tire() { Tipoo = 21, Descrip = "Ajuste de Inventario" },
        new Tire() { Tipoo = 10, Descrip = "Entrega de insumos a una orden de fabricación" },
        new Tire() { Tipoo = 10, Descrip = "Devolución de insumos de una orden de fabricación" },
        //new Tire() { Tipoo = 28, Descrip = "Entrega de un insumo a una orden de armado planeada" },/*tipo 28 = order de armado y tipo 10  10 OF*/
        //new Tire() { Tipoo = 10, Descrip = "Entrega de insumos a una orden de fabricación firme o en curso" },
        //new Tire() { Tipoo = 28, Descrip = "Entrega de un insumo a una orden de armado firme o en curso" },
        //new Tire() { Tipoo = 2, Descrip = "Entrega de consumibles" }, /**/
        new Tire() { Tipoo = 5, Descrip = "Recepción de insumos de un proveedor" }, /*Tipo 5 Recepcion y tipo 6 devolucion: */
        new Tire() { Tipoo = 6, Descrip = "Devolución de insumos a un proveedor" },
        //new Tire() { Tipoo = 14, Descrip = "Envío de un insumo o producto a scrap" }, /*TIPO 14 ENTREGA A SCRAP TIPO 15 DESTRUCCION DE SCRAP(NO PROGRAMADO) TIPO 16 DEVOLUCION DE SCRAP*/
        //new Tire() { Tipoo = 15, Descrip = "Recuperación de un insumo o producto de scrap" },
        new Tire() { Tipoo = 9, Descrip = "Movimientos entre depósitos" }, /*TIPO 9*/
        new Tire() { Tipoo = 1, Descrip = "Remito a un cliente con y sin pedido" } /*TIPO 1*/
        //new Tire() { Tipoo = 1, Descrip = "Devolución de un cliente con y sin pedido" }
        };

    private bool IsVisible { get; set; } = false;

    protected override void OnInitialized()
    {
        stockCabacera = new Stock();
    }

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void OnOverlayclick(MouseEventArgs arg)
    {
        this.IsVisible = false;
    }

    private void Submit()
    {
        Console.WriteLine("Formulario Enviado");
    }

    private void CambiarTipoo(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?> tire)
    {
        stockCabacera.TIPOO = tire.Value.Value;
        Console.WriteLine($"Tire selecccionado {stockCabacera.TIPOO}");
    }

    }
